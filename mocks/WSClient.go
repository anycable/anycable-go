// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// WSClient is an autogenerated mock type for the WSClient type
type WSClient struct {
	mock.Mock
}

// Invoke provides a mock function with given fields: ctx, command, payload, meta
func (_m *WSClient) Invoke(ctx context.Context, command string, payload []byte, meta *map[string]string) ([]byte, int, error) {
	ret := _m.Called(ctx, command, payload, meta)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, *map[string]string) ([]byte, int, error)); ok {
		return rf(ctx, command, payload, meta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, *map[string]string) []byte); ok {
		r0 = rf(ctx, command, payload, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, *map[string]string) int); ok {
		r1 = rf(ctx, command, payload, meta)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, []byte, *map[string]string) error); ok {
		r2 = rf(ctx, command, payload, meta)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Shutdown provides a mock function with given fields: ctx
func (_m *WSClient) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWSClient creates a new instance of WSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WSClient {
	mock := &WSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
