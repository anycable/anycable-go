name: Test

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.11.x, 1.12.x, 1.13.x, 1.14.x, 1.15.x]
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
      GOFLAGS: "-mod=vendor"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Install system deps
      run: |
        sudo apt-get update
        sudo apt-get install bison
    - name: Build mruby
      run: make prepare-mruby
    - name: Run tests
      run: go test -tags mrb ./...
    - name: Build
      if: matrix['go-version'] == '1.15.x' && (contains(github.ref, 'master') || contains(github.event.pull_request.body, '[Build]'))
      run: |
        make build
    - name: Upload linux build
      if: matrix['go-version'] == '1.15.x' && (contains(github.ref, 'master') || contains(github.event.pull_request.body, '[Build]'))
      uses: actions/upload-artifact@v1
      with:
        name: anycable-go-Linux-x86_64
        path: dist/anycable-go

  test-macos:
    strategy:
      matrix:
        go-version: [1.13.x, 1.14.x, 1.15.x]
    runs-on: macos-latest
    env:
      GO111MODULE: on
      GOFLAGS: "-mod=vendor"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - name: Install system deps
      run: |
        brew install bison
    - name: Build mruby
      run: make prepare-mruby
    - name: Run tests
      run: go test -tags mrb ./...
    - name: Build
      if: matrix['go-version'] == '1.15.x' && (contains(github.ref, 'master') || contains(github.event.pull_request.body, '[Build]'))
      run: |
        make build
    - name: Upload linux build
      if: matrix['go-version'] == '1.15.x' && (contains(github.ref, 'master') || contains(github.event.pull_request.body, '[Build]'))
      uses: actions/upload-artifact@v1
      with:
        name: anycable-go-Darwin-x86_64
        path: dist/anycable-go

  test-conformance:
    needs: [test, test-macos]
    strategy:
      matrix:
        adapter: ["http", "redis"]
        ssl: ["ssl", ""]
        exclude:
          - adapter: "redis"
            ssl: "ssl"
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
      GOFLAGS: "-mod=vendor"
      BUNDLE_GEMFILE: .circleci/Gemfile
      BUNDLE_PATH: /home/runner/bundle
      ANYCABLE_BROADCAST_ADAPTER: ${{ matrix.adapter }}
      ANYCABLE_HTTP_BROADCAST_SECRET: any_secret
    services:
      redis:
        image: redis:5.0-alpine
        ports: ["6379:6379"]
        options: --health-cmd="redis-cli ping" --health-interval 1s --health-timeout 3s --health-retries 30
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: 1.15.x
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
    - name: Install system deps
      run: |
        sudo apt-get update
        sudo apt-get install bison
    - name: Build mruby
      run: make prepare-mruby
    - uses: actions/cache@v1
      with:
        path: /home/runner/bundle
        key: bundle-${{ hashFiles('**/.circle/Gemfile') }}
        restore-keys: |
          bundle-
    - name: Install anyt and deps
      run: bundle install && bundle update
    - name: Build test binary
      run: go build -tags mrb -o tmp/anycable-go-test cmd/anycable-go/main.go
    - name: Run anyt (with SSL)
      if: ${{ matrix.ssl == 'ssl' }}
      env:
        ANYCABLE_HTTP_BROADCAST_URL: https://localhost:8090/_broadcast
      run: |
        bundle exec anyt -c \
        "tmp/anycable-go-test --headers=cookie,x-api-token --ssl_key=etc/ssl/server.key --ssl_cert=etc/ssl/server.crt --port=8443" \
        --target-url="wss://localhost:8443/cable"
    - name: Run anyt (without SSL)
      if: ${{ matrix.ssl == '' }}
      run: |
        bundle exec anyt -c \
        "tmp/anycable-go-test --headers=cookie,x-api-token" \
        --target-url="ws://localhost:8080/cable"
