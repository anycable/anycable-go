version: 2.1

requires_prepared_code: &requires_prepared_code
  requires:
  - prepare_code

common_tags_filter: &common_tags_filter
  filters:
    tags:
      only: /^v.*/
    branches:
      only:
        - "master"
        - /^ci\//

# Workflow definition
workflows:
  test_and_release:
    jobs:
    - prepare_code:
        <<: *common_tags_filter
    - build_darwin_mruby:
        <<: *common_tags_filter
    - prepare_mruby:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - test:
        <<: *common_tags_filter
        requires:
        - prepare_mruby
    - build_binary_for_conformance:
        <<: *common_tags_filter
        requires:
          - prepare_mruby
    - build:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - build_linux_mruby:
        <<: *common_tags_filter
        requires:
        - prepare_mruby
    - conformance:
        <<: *common_tags_filter
        requires:
         - build_binary_for_conformance
    - build_docker:
        name: build_docker_main
        requires:
        - test
        - conformance
        - build
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - build_docker:
        name: build_docker_alpine
        version: ${CIRCLE_TAG/v/''}-alpine
        dockerfile: Dockerfile.alpine-linux-amd64
        requires:
        - test
        - conformance
        - build
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - build_docker:
        name: build_docker_mrb
        version: ${CIRCLE_TAG/v/''}-mrb
        mruby: true
        dockerfile: Dockerfile.mrb-linux-amd64
        requires:
        - test
        - conformance
        - build_linux_mruby
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - build_docker:
        name: build_docker_edge
        version: "edge"
        requires:
        - test
        - conformance
        - build
        filters:
          branches:
            only: "master"
    - build_docker:
        name: build_docker_edge_mrb
        version: "edge-mrb"
        mruby: true
        dockerfile: Dockerfile.mrb-linux-amd64
        requires:
        - test
        - conformance
        - build_linux_mruby
        filters:
          branches:
            only: "master"
    - push_latest_docker:
        requires:
        - build_docker_main
        - build_docker_alpine
        - build_docker_mrb
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
          branches:
            ignore: /.*/
    - github_release:
        requires:
        - test
        - conformance
        - build
        - build_linux_mruby
        - build_darwin_mruby
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+((\-|\.)(preview|beta|rc)\d+)?$/
          branches:
            ignore: /.*/
  benchmark:
    jobs:
    - prepare_code
    - prepare_mruby:
        requires:
        - prepare_code
    - benchmark:
        requires:
        - prepare_mruby
executors:
  golang:
    docker:
      - image: cimg/go:1.18.3
    environment:
      CGO_ENABLED: "0"
      GO111MODULE: "on"
      GOFLAGS: "-mod=vendor"
  osx:
    macos:
      xcode: "10.3.0"
    environment:
      GOPATH: /Users/distiller/go
      CGO_ENABLED: "1"
      GO111MODULE: "on"
      GOFLAGS: "-mod=vendor"
      GO_VERSION: 1.18.3
      GO_SHA: a23a24c5528671d444328a36a98056902f699a5a211b6ad5db29ca0c012e0085
  docker:
    docker:
      - image: docker:18.06.0-ce
    working_directory: /root/project/
  ruby:
    docker:
      - image: cimg/ruby:2.7.1

commands:
  build:
    description: Build AnyCable Go binary
    parameters:
      os:
        type: string
      arch:
        type: string
      postfix:
        type: string
    steps:
      - run: env GOOS=<< parameters.os >> GOARCH=<< parameters.arch >> go build -ldflags "-s -w -X github.com/anycable/anycable-go/version.version=${CIRCLE_TAG/v/''} -X github.com/anycable/anycable-go/version.sha=$(echo "$CIRCLE_SHA1" | cut -c -7)" -a -o "/tmp/dist/anycable-go-<< parameters.postfix >>" cmd/anycable-go/main.go
  build-mruby:
    description: Build AnyCable Go binary with mruby support
    parameters:
      os:
        type: string
      arch:
        type: string
      postfix:
        type: string
    steps:
      - run: env GOOS=<< parameters.os >> GOARCH=<< parameters.arch >> go build -ldflags "-s -w -X github.com/anycable/anycable-go/version.version=${CIRCLE_TAG/v/''} -X github.com/anycable/anycable-go/version.sha=$(echo "$CIRCLE_SHA1" | cut -c -7)" -tags mrb -a -o "/tmp/dist/anycable-go-<< parameters.postfix >>" cmd/anycable-go/main.go

orbs:
  ruby: circleci/ruby@1.1

# Jobs definitions
jobs:
  prepare_code:
    executor: golang
    steps:
    - attach_workspace:
        at: .
    - checkout
    - run:
        name: Cache latest master tag
        command: |
          echo $(git tag --merged master -l --sort=-version:refname "v*" | head -n1) > latest-tag.log
    - run:
        name: Download Go deps
        command: |
          go mod vendor
    - persist_to_workspace:
        root: .
        paths: .

  prepare_mruby:
    executor: ruby
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Install bison
        command: |
          sudo apt update && \
          sudo apt -y install bison
    - run:
        name: Build libmruby.a
        command: bash -c '(cd vendor/github.com/mitchellh/go-mruby && MRUBY_CONFIG=../../../../../../etc/build_config.rb make libmruby.a)'
    - persist_to_workspace:
        root: .
        paths:
        - ./vendor/github.com/mitchellh/go-mruby/mruby-build/
        - ./vendor/github.com/mitchellh/go-mruby/libmruby.a

  test:
    executor: golang
    environment:
      CGO_ENABLED: "1"
    steps:
    - attach_workspace:
        at: .
    - run: make test

  benchmark:
    docker:
      - image: cimg/go:1.18.3
      - image: cimg/redis:6.2.6
    environment:
      GO111MODULE: "on"
      GOFLAGS: "-mod=vendor"
      CGO_ENABLED: "1"
      BUILD_ARGS: "-race"
      BUNDLE_GEMFILE: .circleci/Gemfile
      ANYCABLE_RPC_HOST: "127.0.0.1:50051"
    steps:
    - attach_workspace:
        at: .
    - ruby/install:
        version: '2.7'
    - run: bundle install
    - run: env GO111MODULE=off go get github.com/anycable/websocket-bench
    - run: env GO111MODULE=off go get github.com/google/gops
    - run:
        name: Wait for Redis
        command: dockerize -wait tcp://localhost:6379 -timeout 1m
    - run:
        name: Run benchmarks
        command: |
          make benchmarks

  build_binary_for_conformance:
    executor: golang
    environment:
      CGO_ENABLED: "1"
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Building Linux amd64 binary
        command: go build -tags mrb -ldflags "-s -w" -race -a -o "/tmp/anycable-go-test" cmd/anycable-go/main.go
    - save_cache:
        key: binary-for-conformance-{{ .Revision }}
        paths: /tmp/anycable-go-test

  build_darwin_mruby:
    executor: osx
    steps:
    - checkout
    - run:
        name: Installing Golang
        command: |
          curl --http1.1 -o go.pkg https://dl.google.com/go/go${GO_VERSION}.darwin-amd64.pkg && \
          echo "${GO_SHA}  go.pkg" | shasum -a 256 -c - && \
          sudo installer -pkg go.pkg -target /
    - run:
        name: Add Go binaries to PATH
        command: echo 'export PATH="$GOPATH/bin:/usr/local/go/bin:$PATH"' >> $BASH_ENV
    - run: go mod vendor
    - run:
        name: Prepare code for the build
        command: |
          bash -c "(cd vendor/github.com/mitchellh/go-mruby && MRUBY_CONFIG=../../../../../../etc/build_config.rb make libmruby.a)"
    - build-mruby:
        os: darwin
        arch: amd64
        postfix: mrb-darwin-amd64
    - save_cache:
        key: darwin-mruby-{{ .Revision }}
        paths: /tmp/dist/

  build:
    executor: golang
    steps:
    - attach_workspace:
        at: .
    - build:
        os: linux
        arch: amd64
        postfix: linux-amd64
    - build:
        os: linux
        arch: arm
        postfix: linux-arm
    - build:
        os: linux
        arch: arm64
        postfix: linux-arm64
    - build:
        os: windows
        arch: amd64
        postfix: win-amd64.exe
    - build:
        os: darwin
        arch: "arm64"
        postfix: darwin-arm64
    - build:
        os: darwin
        arch: amd64
        postfix: darwin-amd64
    - build:
        os: freebsd
        arch: amd64
        postfix: freebsd-amd64
    - build:
        os: freebsd
        arch: arm
        postfix: freebsd-arm
    - save_cache:
        key: build-{{ .Revision }}
        paths: /tmp/dist/

  build_linux_mruby:
    executor: golang
    environment:
      CGO_ENABLED: "1"
    steps:
    - attach_workspace:
        at: .
    - build-mruby:
        os: linux
        arch: amd64
        postfix: mrb-linux-amd64
    - save_cache:
        key: linux-mruby-{{ .Revision }}
        paths: /tmp/dist/

  conformance:
    docker:
    - image: cimg/ruby:2.7.1
    - image: cimg/redis:6.2.6
    environment:
      BUNDLE_GEMFILE: ".circleci/Gemfile"
    steps:
    - attach_workspace:
        at: .
    - restore_cache:
        key: binary-for-conformance-{{ .Revision }}
    - run:
        name: Install deps
        command: bundle install
    - run:
        name: Wait for Redis
        command: dockerize -wait tcp://localhost:6379 -timeout 1m
    - run:
        name: Default (Redis) pubsub test
        command: bundle exec anyt -c "/tmp/anycable-go-test --headers=cookie,x-api-token" --target-url="ws://localhost:8080/cable"
    - run:
        name: SSL test
        command: bundle exec anyt -c "/tmp/anycable-go-test --headers=cookie,x-api-token --ssl_key=etc/ssl/server.key --ssl_cert=etc/ssl/server.crt --port=8443" --target-url="wss://localhost:8443/cable"
    - run:
        environment:
          ANYCABLE_BROADCAST_ADAPTER: http
          ANYCABLE_HTTP_BROADCAST_SECRET: any_secret
        name: HTTP broadcast test
        command: bundle exec anyt -c "/tmp/anycable-go-test --headers=cookie,x-api-token" --target-url="ws://localhost:8080/cable"

  build_docker:
    parameters:
      dockerfile:
        type: string
        default: "Dockerfile.linux-amd64"
      version:
        type: string
        default: ${CIRCLE_TAG/v/''}
      mruby:
        type: boolean
        default: false
    executor: docker
    steps:
    - setup_remote_docker:
        version: 18.06.0-ce
    - attach_workspace:
        at: .
    - restore_cache:
        key: build-{{ .Revision }}
    - run:
        name: Prepare files for Docker build
        command: |
          cp /etc/ssl/certs/ca-certificates.crt ./.docker/ca-certificates.crt && \
          cp /tmp/dist/anycable-go-linux-amd64 .docker/anycable-go-linux-amd64
    - when:
        condition: <<parameters.mruby>>
        steps:
          - restore_cache:
              key: linux-mruby-{{ .Revision }}
          - run:
              name: Replace with mruby binary
              command: |
                rm .docker/anycable-go-linux-amd64 && \
                cp /tmp/dist/anycable-go-mrb-linux-amd64 .docker/anycable-go-mrb-linux-amd64
    - run:
        name: Build Docker image
        command: docker build -f .docker/<<parameters.dockerfile>> -t anycable/anycable-go:<<parameters.version>> ./
    - run:
        name: Login to Docker registry
        command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - run:
        name: Push Docker image
        command: docker push anycable/anycable-go:<<parameters.version>>

  push_latest_docker:
    executor: docker
    steps:
    - setup_remote_docker:
        version: 18.06.0-ce
    - run:
        name: Login to Docker registry
        command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - run:
        name: Pull base Docker images
        command: |
          docker pull anycable/anycable-go:${CIRCLE_TAG/v/''}
          docker pull anycable/anycable-go:${CIRCLE_TAG/v/''}-mrb
          docker pull anycable/anycable-go:${CIRCLE_TAG/v/''}-alpine
    - run:
        name: Pushs latest Docker images
        command: |
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''} anycable/anycable-go:latest
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''} anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''} anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2/')
            docker push anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')
            docker push anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2/')
            docker push anycable/anycable-go:latest
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''}-mrb anycable/anycable-go:latest-mrb
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''}-mrb anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')-mrb
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''}-mrb anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2/')-mrb
            docker push anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')-mrb
            docker push anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2/')-mrb
            docker push anycable/anycable-go:latest-mrb
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''}-alpine anycable/anycable-go:latest-alpine
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''}-alpine anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')-alpine
            docker tag anycable/anycable-go:${CIRCLE_TAG/v/''}-alpine anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2/')-alpine
            docker push anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1/')-alpine
            docker push anycable/anycable-go:$(echo "$CIRCLE_TAG" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/\1.\2/')-alpine
            docker push anycable/anycable-go:latest-alpine
  github_release:
    executor: golang
    working_directory: /tmp/dist/
    steps:
    - restore_cache:
        key: darwin-mruby-{{ .Revision }}
    - restore_cache:
        key: linux-mruby-{{ .Revision }}
    - restore_cache:
        key: build-{{ .Revision }}
    - run:
        name: Generate SHA256 checksums
        command: sha256sum anycable-go-* > SHA256SUM
    - run:
        name: Install ghr tool
        command: env GO111MODULE=off go get github.com/tcnksm/ghr
    - run:
        name: Upload GitHub release
        command: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -prerelease -delete ${CIRCLE_TAG} ./
