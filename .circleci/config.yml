version: 2.1

github_release_requires: &github_release_requires
  requires:
  - go_tests
  - anyt_test
  - build_darwin
  - build_darwin_mruby
  - build_freebsd
  - build_linux
  - build_linux_mruby
  - build_windows

requires_prepared_code: &requires_prepared_code
  requires:
  - prepare_code

common_tags_filter: &common_tags_filter
  filters:
    tags:
      only: /^v.*/

# Workflow definition
workflows:
  version: 2

  test_and_release:
    jobs:
    - prepare_code:
        <<: *common_tags_filter
    - build_darwin_mruby:
        <<: *common_tags_filter
    - prepare_mruby:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - go_tests:
        <<: *common_tags_filter
        requires:
        - prepare_mruby
    - build_binary_for_anyt_test:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - build_linux:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - build_windows:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - build_darwin:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - build_freebsd:
        <<: *requires_prepared_code
        <<: *common_tags_filter
    - build_linux_mruby:
        <<: *common_tags_filter
        requires:
        - prepare_mruby
    - anyt_test:
        <<: *common_tags_filter
        requires:
        - build_binary_for_anyt_test
    - build_docker:
        requires:
        - go_tests
        - anyt_test
        - build_linux
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - build_docker_mruby:
        requires:
        - go_tests
        - anyt_test
        - build_linux_mruby
        filters:
          tags:
            only: /^v.*/
          branches:
            ignore: /.*/
    - github_release:
        <<: *github_release_requires
        filters:
          tags:
            only: /^v[0-9]+\.[0-9]+\.[0-9]+((\-|\.)(preview|beta|rc)\d+)?$/
          branches:
            ignore: /.*/

executors:
  golang:
    docker:
      - image: circleci/golang:1.11.4-stretch
    working_directory: /go/src/github.com/anycable/anycable-go/
  osx:
    macos:
      xcode: "10.0.0"
    environment:
      GOPATH: /Users/distiller/go
      GOARCH: amd64
      CGO_ENABLED: "1"
      GO_VERSION: 1.11.4
      GO_SHA: cc2b872aa1341ebe37bf65b9008a1aff7715ff9bde8b6503fb12c94dfe31b145
    working_directory: /Users/distiller/go/src/github.com/anycable/anycable-go/
  docker:
    docker:
      - image: docker:18.06.0-ce
    working_directory: /root/project/
  ruby:
    docker:
      - image: circleci/ruby:2.5-stretch


# Jobs definitions
jobs:
  prepare_code:
    executor: golang
    steps:
    - attach_workspace:
        at: .
    - checkout
    - run: dep ensure
    - persist_to_workspace:
        root: .
        paths: .

  prepare_mruby:
    executor: ruby
    steps:
    - attach_workspace:
        at: .
    - run:
        name: Install bison
        command: |
          sudo apt update && \
          sudo apt -y install bison
    - run:
        name: Build libmruby.a
        command: bash -c '(cd vendor/github.com/mitchellh/go-mruby && MRUBY_CONFIG=../../../../../../etc/build_config.rb make libmruby.a)'
    - persist_to_workspace:
        root: .
        paths:
        - ./vendor/github.com/mitchellh/go-mruby/vendor/
        - ./vendor/github.com/mitchellh/go-mruby/libmruby.a

  go_tests:
    executor: golang
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run: make test
    - run: make vet
    - run: make fmt

  build_binary_for_anyt_test:
    executor: golang
    environment:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: "0"
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run:
        name: Building Linux amd64 binary
        command: env GOARCH=amd64 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/anycable-go-test" cmd/anycable-go/main.go
    - save_cache:
        key: binary-for-anyt-test-{{ .Revision }}
        paths: /tmp/anycable-go-test

  build_darwin_mruby:
    executor: osx
    steps:
    - run: mkdir -p ${GOPATH}/src/github.com/anycable/anycable-go/
    - checkout
    - run:
        name: Installing Golang
        command: |
          curl -o go.pkg https://dl.google.com/go/go${GO_VERSION}.darwin-amd64.pkg && \
          echo "${GO_SHA}  go.pkg" | shasum -a 256 -c - && \
          sudo installer -pkg go.pkg -target /
    - run:
        name: Prepare code for the build
        command: |
          /usr/local/go/bin/go get -u github.com/golang/dep/cmd/dep && \
          ${GOPATH}/bin/dep ensure && \
          bash -c "(cd vendor/github.com/mitchellh/go-mruby && MRUBY_CONFIG=../../../../../../etc/build_config.rb make libmruby.a)"
    - run:
        name: Build Darwin amd64 binary (with mruby)
        command: /usr/local/go/bin/go build -ldflags "-s -w -X main.version=$(git describe --tags)-mrb" -tags mrb -o "/tmp/dist/anycable-go-$(git describe --tags)-mrb-dawrin-amd64" cmd/anycable-go/main.go
    - save_cache:
        key: darwin-mruby-{{ .Revision }}
        paths: /tmp/dist/

  build_linux:
    executor: golang
    environment:
      GOOS: linux
      CGO_ENABLED: "0"
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run:
        name: Building Linux i386 binary
        command: env GOARCH=386 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-linux-386" cmd/anycable-go/main.go
    - run:
        name: Building Linux amd64 binary
        command: env GOARCH=amd64 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-linux-amd64" cmd/anycable-go/main.go
    - run:
        name: Building Linux arm binary
        command: env GOARCH=arm go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-linux-arm" cmd/anycable-go/main.go
    - run:
        name: Building Linux arm64 binary
        command: env GOARCH=arm64 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-linux-arm64" cmd/anycable-go/main.go
    - save_cache:
        key: linux-nomruby-{{ .Revision }}
        paths: /tmp/dist/

  build_windows:
    executor: golang
    environment:
      GOOS: windows
      CGO_ENABLED: "0"
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run:
        name: Building Windows i386 binary
        command: env GOARCH=386 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-win-386" cmd/anycable-go/main.go
    - run:
        name: Building Windows amd64 binary
        command: env GOARCH=amd64 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-win-amd64" cmd/anycable-go/main.go
    - save_cache:
        key: windows-{{ .Revision }}
        paths: /tmp/dist/

  build_darwin:
    executor: golang
    environment:
      GOOS: darwin
      CGO_ENABLED: "0"
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run:
        name: Building Darwin i386 binary
        command: env GOARCH=386 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-darwin-386" cmd/anycable-go/main.go
    - run:
        name: Building Darwin amd64 binary
        command: env GOARCH=amd64 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-darwin-amd64" cmd/anycable-go/main.go
    - save_cache:
        key: darwin-nomruby-{{ .Revision }}
        paths: /tmp/dist/

  build_freebsd:
    executor: golang
    environment:
      GOOS: freebsd
      CGO_ENABLED: "0"
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run:
        name: Building FreeBSD i386 binary
        command: env GOARCH=386 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-freebsd-386" cmd/anycable-go/main.go
    - run:
        name: Building FreeBSD amd64 binary
        command: env GOARCH=amd64 go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-freebsd-amd64" cmd/anycable-go/main.go
    - run:
        name: Building FreeBSD arm binary
        command: env GOARCH=arm go build -ldflags "-s -w -X main.version=$(git describe --tags)" -a -o "/tmp/dist/anycable-go-$(git describe --tags)-freebsd-arm" cmd/anycable-go/main.go
    - save_cache:
        key: freebsd-{{ .Revision }}
        paths: /tmp/dist/

  build_linux_mruby:
    executor: golang
    environment:
      GOOS: linux
      GOARCH: amd64
      CGO_ENABLED: "1"
    steps:
    - attach_workspace:
        at: /go/src/github.com/anycable/anycable-go/
    - run:
        name: Building Linux amd64 binary
        command: env go build -ldflags "-s -w -X main.version=$(git describe --tags)" -tags mrb -a -o "/tmp/dist/anycable-go-$(git describe --tags)-mrb-linux-amd64" cmd/anycable-go/main.go
    - save_cache:
        key: linux-mruby-{{ .Revision }}
        paths: /tmp/dist/

  anyt_test:
    docker:
    - image: circleci/ruby:2.5.1-stretch
    - image: circleci/redis:4.0.11-alpine3.8
    steps:
    - attach_workspace:
        at: .
    - restore_cache:
        key: binary-for-anyt-test-{{ .Revision }}
    - run:
        name: Install gem anyt (conformance testing tool)
        command: gem install anyt
    - run:
        name: Wait for Redis
        command: dockerize -wait tcp://localhost:6379 -timeout 1m
    - run: anyt -c "/tmp/anycable-go-test --headers=cookie,x-api-token" --target-url="ws://localhost:8080/cable"
    - run: anyt -c "/tmp/anycable-go-test --headers=cookie,x-api-token --ssl_key=etc/ssl/server.key --ssl_cert=etc/ssl/server.crt --port=8443" --target-url="wss://localhost:8443/cable"

  build_docker:
    executor: docker
    steps:
    - setup_remote_docker:
        version: 18.06.0-ce
    - attach_workspace:
        at: .
    - restore_cache:
        key: linux-nomruby-{{ .Revision }}
    - run:
        name: Prepare files for Docker build
        command: |
          cp /etc/ssl/certs/ca-certificates.crt ./.docker/ca-certificates.crt && \
          cp /tmp/dist/anycable-go-*-linux-amd64 .docker/anycable-go-linux-amd64
    - run:
        name: Build Docker image
        command: docker build -f Dockerfile.linux-amd64 -t anycable/anycable-go:${CIRCLE_TAG} ./
    - run:
        name: Login to Docker registry
        command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - run:
        name: Push Docker image
        command: docker push anycable/anycable-go:${CIRCLE_TAG}

  build_docker_mruby:
    executor: docker
    steps:
    - setup_remote_docker:
        version: 18.06.0-ce
    - attach_workspace:
        at: .
    - restore_cache:
        key: linux-mruby-{{ .Revision }}
    - run:
        name: Prepare binary
        command:
          cp /tmp/dist/anycable-go-*-mrb-linux-amd64 .docker/anycable-go-mrb-linux-amd64
    - run:
        name: Build Docker image
        command: docker build -f Dockerfile.mrb-linux-amd64 -t anycable/anycable-go:${CIRCLE_TAG}-mrb ./
    - run:
        name: Login to Docker registry
        command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
    - run:
        name: Push Docker image
        command: docker push anycable/anycable-go:${CIRCLE_TAG}-mrb

  github_release:
    executor: golang
    working_directory: /tmp/dist/
    steps:
    - restore_cache:
        key: darwin-mruby-{{ .Revision }}
    - restore_cache:
        key: darwin-nomruby-{{ .Revision }}
    - restore_cache:
        key: linux-mruby-{{ .Revision }}
    - restore_cache:
        key: linux-nomruby-{{ .Revision }}
    - restore_cache:
        key: freebsd-{{ .Revision }}
    - restore_cache:
        key: windows-{{ .Revision }}
    - run:
        name: Generate SHA256 checksums
        command: sha256sum anycable-go-* > SHA256SUM
    - run:
        name: Install ghr tool
        command: go get github.com/tcnksm/ghr
    - run:
        name: Upload GitHub release
        command: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -prerelease -delete ${CIRCLE_TAG} ./
